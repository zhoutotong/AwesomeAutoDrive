// Generated by gencpp from file nox_msgs/Signal.msg
// DO NOT EDIT!


#ifndef NOX_MSGS_MESSAGE_SIGNAL_H
#define NOX_MSGS_MESSAGE_SIGNAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nox_msgs
{
template <class ContainerAllocator>
struct Signal_
{
  typedef Signal_<ContainerAllocator> Type;

  Signal_()
    : flag(0)
    , type(0)
    , code(0)
    , description()  {
    }
  Signal_(const ContainerAllocator& _alloc)
    : flag(0)
    , type(0)
    , code(0)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _flag_type;
  _flag_type flag;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _code_type;
  _code_type code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;



  enum {
    GENERAL = 0u,
    EMERGENCY = 1u,
    ERROR = 2u,
    SYSTEM = 3u,
  };


  typedef boost::shared_ptr< ::nox_msgs::Signal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nox_msgs::Signal_<ContainerAllocator> const> ConstPtr;

}; // struct Signal_

typedef ::nox_msgs::Signal_<std::allocator<void> > Signal;

typedef boost::shared_ptr< ::nox_msgs::Signal > SignalPtr;
typedef boost::shared_ptr< ::nox_msgs::Signal const> SignalConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nox_msgs::Signal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nox_msgs::Signal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nox_msgs': ['/media/yarten/DATA/Project/ROS/NOX_Project/nox/src/nox_msgs/msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Signal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Signal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Signal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Signal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Signal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Signal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nox_msgs::Signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb200a1ddb542b24a03a91d0cb38f364";
  }

  static const char* value(const ::nox_msgs::Signal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb200a1ddb542b24ULL;
  static const uint64_t static_value2 = 0xa03a91d0cb38f364ULL;
};

template<class ContainerAllocator>
struct DataType< ::nox_msgs::Signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nox_msgs/Signal";
  }

  static const char* value(const ::nox_msgs::Signal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nox_msgs::Signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Description a signal\n"
"\n"
"# -----------------------------------\n"
"\n"
"int32 flag\n"
"\n"
"uint32 GENERAL   = 0\n"
"uint32 EMERGENCY = 1\n"
"uint32 ERROR     = 2\n"
"uint32 SYSTEM    = 3\n"
"\n"
"# ------------------------------------\n"
"\n"
"int32 type\n"
"\n"
"int32 code\n"
"\n"
"string description\n"
;
  }

  static const char* value(const ::nox_msgs::Signal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nox_msgs::Signal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.type);
      stream.next(m.code);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Signal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nox_msgs::Signal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nox_msgs::Signal_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOX_MSGS_MESSAGE_SIGNAL_H
