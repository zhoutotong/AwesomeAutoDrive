// Generated by gencpp from file nox_msgs/Overlap.msg
// DO NOT EDIT!


#ifndef NOX_MSGS_MESSAGE_OVERLAP_H
#define NOX_MSGS_MESSAGE_OVERLAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nox_msgs
{
template <class ContainerAllocator>
struct Overlap_
{
  typedef Overlap_<ContainerAllocator> Type;

  Overlap_()
    : id(0)
    , on(0)
    , type(0)
    , start(0.0)
    , end(0.0)  {
    }
  Overlap_(const ContainerAllocator& _alloc)
    : id(0)
    , on(0)
    , type(0)
    , start(0.0)
    , end(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef uint64_t _on_type;
  _on_type on;

   typedef uint8_t _type_type;
  _type_type type;

   typedef double _start_type;
  _start_type start;

   typedef double _end_type;
  _end_type end;



  enum {
    UNKNOWN = 0u,
    LANE = 1u,
  };


  typedef boost::shared_ptr< ::nox_msgs::Overlap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nox_msgs::Overlap_<ContainerAllocator> const> ConstPtr;

}; // struct Overlap_

typedef ::nox_msgs::Overlap_<std::allocator<void> > Overlap;

typedef boost::shared_ptr< ::nox_msgs::Overlap > OverlapPtr;
typedef boost::shared_ptr< ::nox_msgs::Overlap const> OverlapConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nox_msgs::Overlap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nox_msgs::Overlap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nox_msgs': ['/media/yarten/DATA/Project/ROS/NOX_Project/nox/src/nox_msgs/msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Overlap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Overlap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Overlap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Overlap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Overlap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Overlap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nox_msgs::Overlap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02792caf3631cba624a8ca595b1aedfc";
  }

  static const char* value(const ::nox_msgs::Overlap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02792caf3631cba6ULL;
  static const uint64_t static_value2 = 0x24a8ca595b1aedfcULL;
};

template<class ContainerAllocator>
struct DataType< ::nox_msgs::Overlap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nox_msgs/Overlap";
  }

  static const char* value(const ::nox_msgs::Overlap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nox_msgs::Overlap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id       # 覆盖信息本身的ID\n"
"uint64 on       # 被覆盖物的ID\n"
"uint8 type      # 被覆盖物的类型\n"
"float64 start   # 被覆盖的范围起始（时间或距离，由语境定义）\n"
"float64 end     # 被覆盖的范围终止\n"
"\n"
"# -----------------------------------\n"
"# Type to overlap\n"
"\n"
"uint8 UNKNOWN = 0\n"
"uint8 LANE = 1\n"
"\n"
"# -----------------------------------\n"
;
  }

  static const char* value(const ::nox_msgs::Overlap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nox_msgs::Overlap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.on);
      stream.next(m.type);
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Overlap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nox_msgs::Overlap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nox_msgs::Overlap_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "on: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.on);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "start: ";
    Printer<double>::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    Printer<double>::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOX_MSGS_MESSAGE_OVERLAP_H
