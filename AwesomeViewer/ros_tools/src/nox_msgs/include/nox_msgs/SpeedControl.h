// Generated by gencpp from file nox_msgs/SpeedControl.msg
// DO NOT EDIT!


#ifndef NOX_MSGS_MESSAGE_SPEEDCONTROL_H
#define NOX_MSGS_MESSAGE_SPEEDCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nox_msgs
{
template <class ContainerAllocator>
struct SpeedControl_
{
  typedef SpeedControl_<ContainerAllocator> Type;

  SpeedControl_()
    : id(0)
    , s_start(0.0)
    , s_end(0.0)
    , v_upper(0.0)
    , v_lower(0.0)  {
    }
  SpeedControl_(const ContainerAllocator& _alloc)
    : id(0)
    , s_start(0.0)
    , s_end(0.0)
    , v_upper(0.0)
    , v_lower(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef double _s_start_type;
  _s_start_type s_start;

   typedef double _s_end_type;
  _s_end_type s_end;

   typedef double _v_upper_type;
  _v_upper_type v_upper;

   typedef double _v_lower_type;
  _v_lower_type v_lower;





  typedef boost::shared_ptr< ::nox_msgs::SpeedControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nox_msgs::SpeedControl_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedControl_

typedef ::nox_msgs::SpeedControl_<std::allocator<void> > SpeedControl;

typedef boost::shared_ptr< ::nox_msgs::SpeedControl > SpeedControlPtr;
typedef boost::shared_ptr< ::nox_msgs::SpeedControl const> SpeedControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nox_msgs::SpeedControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nox_msgs::SpeedControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nox_msgs': ['/media/yarten/DATA/Project/ROS/NOX_Project/nox/src/nox_msgs/msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::SpeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::SpeedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::SpeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::SpeedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::SpeedControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::SpeedControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nox_msgs::SpeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16374b150f0d0f8823795c353a7cd74f";
  }

  static const char* value(const ::nox_msgs::SpeedControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16374b150f0d0f88ULL;
  static const uint64_t static_value2 = 0x23795c353a7cd74fULL;
};

template<class ContainerAllocator>
struct DataType< ::nox_msgs::SpeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nox_msgs/SpeedControl";
  }

  static const char* value(const ::nox_msgs::SpeedControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nox_msgs::SpeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Description of the speed limitation on the map\n"
"\n"
"uint64  id\n"
"float64 s_start\n"
"float64 s_end\n"
"float64 v_upper\n"
"float64 v_lower\n"
;
  }

  static const char* value(const ::nox_msgs::SpeedControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nox_msgs::SpeedControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.s_start);
      stream.next(m.s_end);
      stream.next(m.v_upper);
      stream.next(m.v_lower);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nox_msgs::SpeedControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nox_msgs::SpeedControl_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "s_start: ";
    Printer<double>::stream(s, indent + "  ", v.s_start);
    s << indent << "s_end: ";
    Printer<double>::stream(s, indent + "  ", v.s_end);
    s << indent << "v_upper: ";
    Printer<double>::stream(s, indent + "  ", v.v_upper);
    s << indent << "v_lower: ";
    Printer<double>::stream(s, indent + "  ", v.v_lower);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOX_MSGS_MESSAGE_SPEEDCONTROL_H
