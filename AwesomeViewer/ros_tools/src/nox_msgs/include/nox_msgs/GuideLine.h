// Generated by gencpp from file nox_msgs/GuideLine.msg
// DO NOT EDIT!


#ifndef NOX_MSGS_MESSAGE_GUIDELINE_H
#define NOX_MSGS_MESSAGE_GUIDELINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nox_msgs/Path.h>
#include <nox_msgs/SpeedControl.h>
#include <nox_msgs/StopLine.h>
#include <nox_msgs/Boundary.h>

namespace nox_msgs
{
template <class ContainerAllocator>
struct GuideLine_
{
  typedef GuideLine_<ContainerAllocator> Type;

  GuideLine_()
    : id(0)
    , path()
    , speed()
    , stop()
    , boundary()
    , passable(false)  {
    }
  GuideLine_(const ContainerAllocator& _alloc)
    : id(0)
    , path(_alloc)
    , speed(_alloc)
    , stop(_alloc)
    , boundary(_alloc)
    , passable(false)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef  ::nox_msgs::Path_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef std::vector< ::nox_msgs::SpeedControl_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nox_msgs::SpeedControl_<ContainerAllocator> >::other >  _speed_type;
  _speed_type speed;

   typedef std::vector< ::nox_msgs::StopLine_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nox_msgs::StopLine_<ContainerAllocator> >::other >  _stop_type;
  _stop_type stop;

   typedef std::vector< ::nox_msgs::Boundary_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nox_msgs::Boundary_<ContainerAllocator> >::other >  _boundary_type;
  _boundary_type boundary;

   typedef uint8_t _passable_type;
  _passable_type passable;





  typedef boost::shared_ptr< ::nox_msgs::GuideLine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nox_msgs::GuideLine_<ContainerAllocator> const> ConstPtr;

}; // struct GuideLine_

typedef ::nox_msgs::GuideLine_<std::allocator<void> > GuideLine;

typedef boost::shared_ptr< ::nox_msgs::GuideLine > GuideLinePtr;
typedef boost::shared_ptr< ::nox_msgs::GuideLine const> GuideLineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nox_msgs::GuideLine_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nox_msgs::GuideLine_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nox_msgs': ['/media/yarten/DATA/Project/ROS/NOX_Project/nox/src/nox_msgs/msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::GuideLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::GuideLine_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::GuideLine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::GuideLine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::GuideLine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::GuideLine_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nox_msgs::GuideLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a03a4bd7e33c1e4634bc55e1af619885";
  }

  static const char* value(const ::nox_msgs::GuideLine_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa03a4bd7e33c1e46ULL;
  static const uint64_t static_value2 = 0x34bc55e1af619885ULL;
};

template<class ContainerAllocator>
struct DataType< ::nox_msgs::GuideLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nox_msgs/GuideLine";
  }

  static const char* value(const ::nox_msgs::GuideLine_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nox_msgs::GuideLine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Description a guide line with a lot of guide information for vehicle\n"
"\n"
"uint64           id\n"
"Path             path\n"
"SpeedControl[]   speed\n"
"StopLine[]       stop\n"
"Boundary[]       boundary\n"
"bool             passable\n"
"================================================================================\n"
"MSG: nox_msgs/Path\n"
"PathPoint[] points\n"
"================================================================================\n"
"MSG: nox_msgs/PathPoint\n"
"# Description the point on a path\n"
"\n"
"geometry_msgs/Pose pose\n"
"float64 kappa\n"
"float64 dkappa\n"
"float64 s\n"
"float64 width   # 路点的宽度（指车道宽度）\n"
"Bound   bound   # 路点的边界（指整个路的边界，相对于该点的横向距离）\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: nox_msgs/Bound\n"
"float64 lower # lower bound\n"
"float64 upper # upper bound\n"
"================================================================================\n"
"MSG: nox_msgs/SpeedControl\n"
"# Description of the speed limitation on the map\n"
"\n"
"uint64  id\n"
"float64 s_start\n"
"float64 s_end\n"
"float64 v_upper\n"
"float64 v_lower\n"
"================================================================================\n"
"MSG: nox_msgs/StopLine\n"
"# Description of the stop line on the map\n"
"\n"
"uint64  id\n"
"float64 s\n"
"================================================================================\n"
"MSG: nox_msgs/Boundary\n"
"# Description of a boundary along a guide line\n"
"\n"
"uint64    id\n"
"Bound     s          # 边界在引导线上附着的位置\n"
"Function  func       # 描述边界的数学函数\n"
"bool      passable   # 可通行的\n"
"================================================================================\n"
"MSG: nox_msgs/Function\n"
"# Description of a math function\n"
"\n"
"float64[] coeff  # 函数系数\n"
"Bound   x        # 定义域\n"
"\n"
"# -----------------------------------\n"
"uint32  type     # 函数类型（决定了系数的意义）\n"
"\n"
"uint32 Unknown    = 0\n"
"uint32 Polynomial = 1\n"
;
  }

  static const char* value(const ::nox_msgs::GuideLine_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nox_msgs::GuideLine_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.path);
      stream.next(m.speed);
      stream.next(m.stop);
      stream.next(m.boundary);
      stream.next(m.passable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GuideLine_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nox_msgs::GuideLine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nox_msgs::GuideLine_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::nox_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nox_msgs::SpeedControl_<ContainerAllocator> >::stream(s, indent + "    ", v.speed[i]);
    }
    s << indent << "stop[]" << std::endl;
    for (size_t i = 0; i < v.stop.size(); ++i)
    {
      s << indent << "  stop[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nox_msgs::StopLine_<ContainerAllocator> >::stream(s, indent + "    ", v.stop[i]);
    }
    s << indent << "boundary[]" << std::endl;
    for (size_t i = 0; i < v.boundary.size(); ++i)
    {
      s << indent << "  boundary[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nox_msgs::Boundary_<ContainerAllocator> >::stream(s, indent + "    ", v.boundary[i]);
    }
    s << indent << "passable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.passable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOX_MSGS_MESSAGE_GUIDELINE_H
