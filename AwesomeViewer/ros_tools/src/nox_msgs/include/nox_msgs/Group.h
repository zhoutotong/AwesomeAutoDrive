// Generated by gencpp from file nox_msgs/Group.msg
// DO NOT EDIT!


#ifndef NOX_MSGS_MESSAGE_GROUP_H
#define NOX_MSGS_MESSAGE_GROUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nox_msgs
{
template <class ContainerAllocator>
struct Group_
{
  typedef Group_<ContainerAllocator> Type;

  Group_()
    : id(0)
    , items()  {
    }
  Group_(const ContainerAllocator& _alloc)
    : id(0)
    , items(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _items_type;
  _items_type items;





  typedef boost::shared_ptr< ::nox_msgs::Group_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nox_msgs::Group_<ContainerAllocator> const> ConstPtr;

}; // struct Group_

typedef ::nox_msgs::Group_<std::allocator<void> > Group;

typedef boost::shared_ptr< ::nox_msgs::Group > GroupPtr;
typedef boost::shared_ptr< ::nox_msgs::Group const> GroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nox_msgs::Group_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nox_msgs::Group_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nox_msgs': ['/media/yarten/DATA/Project/ROS/NOX_Project/nox/src/nox_msgs/msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Group_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Group_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Group_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Group_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Group_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Group_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nox_msgs::Group_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31ffb5cf9dafc4f8c8c85d6b5995a1bb";
  }

  static const char* value(const ::nox_msgs::Group_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31ffb5cf9dafc4f8ULL;
  static const uint64_t static_value2 = 0xc8c85d6b5995a1bbULL;
};

template<class ContainerAllocator>
struct DataType< ::nox_msgs::Group_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nox_msgs/Group";
  }

  static const char* value(const ::nox_msgs::Group_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nox_msgs::Group_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# -----------------------------------\n"
"# 描述一组ID的集合，要求每个元素属于同一种\n"
"# 物体。由使用者负责区分。\n"
"\n"
"uint64 id\n"
"uint64[] items\n"
"\n"
"# -----------------------------------\n"
;
  }

  static const char* value(const ::nox_msgs::Group_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nox_msgs::Group_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.items);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Group_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nox_msgs::Group_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nox_msgs::Group_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "items[]" << std::endl;
    for (size_t i = 0; i < v.items.size(); ++i)
    {
      s << indent << "  items[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.items[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOX_MSGS_MESSAGE_GROUP_H
