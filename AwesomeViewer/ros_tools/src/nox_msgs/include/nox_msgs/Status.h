// Generated by gencpp from file nox_msgs/Status.msg
// DO NOT EDIT!


#ifndef NOX_MSGS_MESSAGE_STATUS_H
#define NOX_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nox_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : name()
    , id(0)
    , description()
    , state(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , id(0)
    , description(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef uint32_t _state_type;
  _state_type state;



  enum {
    UNDEFINED = 0u,
    BASIC_MASK = 4026531840u,
    NORMAL = 268435456u,
    OFFLINE = 536870912u,
    DISABLE = 805306368u,
    WORKING_MASK = 251658240u,
    FREE = 16777216u,
    BUSY = 33554432u,
    WAITING = 50331648u,
    EXTRA_MASK = 255u,
  };


  typedef boost::shared_ptr< ::nox_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nox_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::nox_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::nox_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::nox_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nox_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nox_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nox_msgs': ['/media/yarten/DATA/Project/ROS/NOX_Project/nox/src/nox_msgs/msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nox_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nox_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nox_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nox_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc01052780bbbd54560a29946a09b6de";
  }

  static const char* value(const ::nox_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc01052780bbbd54ULL;
  static const uint64_t static_value2 = 0x560a29946a09b6deULL;
};

template<class ContainerAllocator>
struct DataType< ::nox_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nox_msgs/Status";
  }

  static const char* value(const ::nox_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nox_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Description the status of a module or a device\n"
"\n"
"string name\n"
"int32  id\n"
"string description\n"
"\n"
"# -----------------------------------\n"
"\n"
"uint32 state\n"
"\n"
"# State is described by several parts:\n"
"# B0: Extra\n"
"# B1: Reserved\n"
"# B2: Reserved\n"
"# B3.L: Working state\n"
"# B3.H: Basic State\n"
"# ------------------------------------\n"
"\n"
"uint32 UNDEFINED = 0  # Undefined\n"
"\n"
"# ------------------------------------\n"
"\n"
"uint32 BASIC_MASK = 4026531840  # 0xF0000000\n"
"uint32 NORMAL     = 268435456   # 0x10000000\n"
"uint32 OFFLINE    = 536870912   # 0x20000000\n"
"uint32 DISABLE    = 805306368   # 0x30000000\n"
"\n"
"# ------------------------------------\n"
"\n"
"uint32 WORKING_MASK = 251658240 # 0x0F000000\n"
"uint32 FREE         = 16777216  # 0x01000000\n"
"uint32 BUSY         = 33554432  # 0x02000000\n"
"uint32 WAITING      = 50331648  # 0x03000000\n"
"\n"
"# ------------------------------------\n"
"\n"
"uint32 EXTRA_MASK   = 255 # 0xFF\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::nox_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nox_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.description);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nox_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nox_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOX_MSGS_MESSAGE_STATUS_H
